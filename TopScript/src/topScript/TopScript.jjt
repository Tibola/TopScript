/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD = 10;
}

PARSER_BEGIN(TopScript)
package topScript;

public class TopScript
{
  public static void main(String args [])
  {
    System.out.println("🔝");
    System.out.println("Reading from standard input...");
    System.out.println("Entra o programa top:");
    new TopScript(System.in);
    try
    {
      SimpleNode n = TopScript.Start();
      n.dump("-- > ");

      System.out.println("Vlw.");
    }
    catch (Exception e)
    {
      System.out.println("\n😢.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(TopScript)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

// Palavras reservadas
TOKEN :
{
  < INICIOPROG      : "🔝"  >
| < FIMPROG         : "🔚"  >
| < SE              : "🤔"  >
| < SENAO           : "🙄"  >
| < PARA            : "🔁"  >
| < ENQUANTO        : "🔄"  >
| < PRINT           : "🤬"  >
| < RETORNO         : "↪️"  >
| < ATRIBUI         : "✍️"  >
| < MAIS_MAIS       : "⏫"  >
| < MENOS_MENOS     : "⏬"  >
| < BOOL_TRUE       : "👍"  >
| < BOOL_FALSE      : "👎"  >
}

// Delimitadores
TOKEN :
{
  < ABRE_CHAVES     : "👉"  >
| < FECHA_CHAVES    : "👈"  >
| < SEPARADOR       : "👌"  >
| < ABRE_PARENTESES : "("   >
| < FECHA_PARENTESES: ")"   >
| < ABRE_COLCHETES  : "["   >
| < FECHA_COLCHETES : "]"   >
| < VIRGULA         : ","   >
| < PONTO           : "."   >
| < ASPA            : "'"   >

}

// Tipos de Dados
TOKEN :
{
  < TIPO_NUMERO     : "#️⃣"  >
| < TIPO_TEXTO      : "🔡"  >
| < TIPO_BOOL       : "🚻"  >
| < TIPO_FUNCAO     : "▶️"   >
}

// Operadores Matematicos
TOKEN: 
{
  < OP_SUM          : "+" >
| < OP_SUB          : "-" >
| < OP_MUL          : "*" >
| < OP_DIV          : "/" >
| < OP_MOD          : "%" >
}

// Operadores Lógicos
TOKEN:
{
  < OP_AND          : "🅰️" >
| < OP_OR           : "🅾️" >
| < OP_GT           : ">" >
| < OP_LT           : "<" >
| < OP_EQ           : "🤝" >
| < OP_DIF          : "❗" >
}

// Caracteres
TOKEN:
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < #DIGITO : ([ "0"-"9" ])+ >
}

// Sentencas 
TOKEN:
{
  < NUMERO          : 
    < DIGITO >
  | < DIGITO > "." < DIGITO >
  | < OP_SUB > < DIGITO >
  | < OP_SUB > < DIGITO > "." < DIGITO >>
}

SimpleNode Start() :
{}
{
  (top())
  {
    return jjtThis;
  }
}

/**
 * HC SVNT DRACONES
 * Não terminais
 */

void letraMinuscula () : {}{< LETRA_MINUSCULA >}
void letraMaiuscula () : {}{< LETRA_MAIUSCULA >}
void numero () : {}{< NUMERO >}

void inicioprog (): {}{< INICIOPROG >}
void fimprog (): {}{< FIMPROG >}
void se (): {}{< SE >}
void senao (): {}{< SENAO >}
void para (): {}{< PARA >}
void enquanto (): {}{< ENQUANTO >}
void print (): {}{< PRINT >}
void atribui (): {}{< ATRIBUI >}
void maisMais (): {}{< MAIS_MAIS >}
void menosMenos (): {}{< MENOS_MENOS >}
void boolTrue (): {}{< BOOL_TRUE >}
void boolFalse (): {}{< BOOL_FALSE >}
void abreChaves (): {}{< ABRE_CHAVES >}
void fechaChaves (): {}{< FECHA_CHAVES >}
void separador (): {}{< SEPARADOR >}
void abreParenteses (): {}{< ABRE_PARENTESES >}
void fechaParenteses (): {}{< FECHA_PARENTESES >}
void abreColchetes (): {}{< ABRE_COLCHETES >}
void fechaColchetes (): {}{< FECHA_COLCHETES >}
void virgula (): {}{< VIRGULA >}
void ponto (): {}{< PONTO >}
void aspa (): {}{< ASPA >}
void tipoNumero (): {}{< TIPO_NUMERO >}
void tipoTexto (): {}{< TIPO_TEXTO >}
void tipoBool (): {}{< TIPO_BOOL >}
void tipoFuncao (): {}{< TIPO_FUNCAO >}
void opSum (): {}{< OP_SUM >}
void opSub (): {}{< OP_SUB >}
void opMul (): {}{< OP_MUL >}
void opDiv (): {}{< OP_DIV >}
void opMod (): {}{< OP_MOD >}
void opAnd (): {}{< OP_AND >}
void opOr (): {}{< OP_OR >}
void opGt (): {}{< OP_GT >}
void opLt (): {}{< OP_LT >}
void opEq (): {}{< OP_EQ >}
void opDif (): {}{< OP_DIF >}

// Fim das Declaracoes Redundantes

void retorno (): 
{}
{
  < RETORNO > expressao()
}

void texto () :
{}{
  (< LETRA_MAIUSCULA > | < LETRA_MINUSCULA > )+
}

void operador():
{ }
{
	opSub() | opSum() | opDiv() | opMul() | opMod() | opAnd() | opOr() | opDif() | opEq() | opLt() | opGt()
}

void dado() :
{ }
{
	constante() | executarFuncao() | idNome()
}

void expressao():
{ }
{
  dado() (operador() (dado() | expressao()))*
| abreParenteses() expressao() fechaParenteses() (operador() expressao())?
}

void string() :
{}
{
  aspa()
  (
    texto() |
    numero()
  )*
  aspa()
}

void funcao() :
{}
{
  abreParenteses() (declaraVariaveis())? fechaParenteses()
  abreChaves()
    bloco()
  fechaChaves()
}

void constante() :
{}
{
    numero()
  | string()
  | boolFalse()
  | boolTrue()
  | funcao()
}

void idTipo() :
{}
{
    tipoBool()
  | tipoNumero()
  | tipoFuncao()
  | tipoTexto()
}

void palavrasReservadas() :
{ }
{
  print()
}

void idNome() :
{}
{
  (letraMinuscula() (texto() | numero())* ) | (palavrasReservadas() )
}

void atribuicao() :
{}
{
  atribui() ( executarFuncao() | expressao() )
}

void declaraVariaveis() :
{}
{
  idTipo() idNome() (atribuicao())? 
  (virgula() idNome() (atribuicao())?)*
}
/*
void operadorLogico() :
{}
{
  opAnd() | opOr() | opDif() | opEq() | opLt() | opGt()
}

void expressaoLogica () :
{}
{
  expressao() (operadorLogico() expressao())?
}
*/
void condicional() :
{}
{
  se() expressao() 
  abreChaves()
    bloco()
  fechaChaves()
  (senao()
    abreChaves() 
      bloco()
    fechaChaves()
  )?
}

void repeticaoPara () :
{}
{
  para() declaraVariaveis() separador() expressao() separador() bloco() 
  abreChaves()
    bloco()
  fechaChaves()
}

void repeticaoEnquanto () :
{}
{
  enquanto() expressao()
  abreChaves()
    bloco()
  fechaChaves()
}

void executarFuncao() :
{}
{
  idNome() 
  abreParenteses() 
    (expressao() (virgula() expressao())* )? 
  fechaParenteses()
}

void top() :
{}
{
  inicioprog()
	bloco()
  fimprog()
}

void crementos() :
{}
{
  (idNome() atribuicao())
  | (idNome() maisMais())
  | (idNome() menosMenos())
  | (maisMais() idNome())
  | (menosMenos() idNome())
}

void bloco():
{}
{
  (
    declaraVariaveis()
    | condicional()
    | repeticaoPara()
    | repeticaoEnquanto()
    | executarFuncao()
    | crementos()
    | retorno()
  )*
}