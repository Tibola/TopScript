/* Generated By:JJTree&JavaCC: Do not edit this line. TopScript.java */
package topscript;

public class TopScript/*@bgen(jjtree)*/implements TopScriptTreeConstants, TopScriptConstants {/*@bgen(jjtree)*/
  protected static JJTTopScriptState jjtree = new JJTTopScriptState();public static void main(String args [])
  {
    System.out.println("\ud83d\udd1d");
    System.out.println("Reading from standard input...");
    System.out.println("Entra o programa top:");
    new TopScript(System.in);
    try
    {
      SimpleNode n = TopScript.Start();
      n.dump("-- > ");

      System.out.println("Vlw.");
    }
    catch (Exception e)
    {
      System.out.println("\u005cn\ud83d\ude22.");
      System.out.println(e.getMessage());
    }
  }

// FIM da tentativa de resolver o NUMERO com prefixos comuns
  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      top();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * HC SVNT DRACONES
 * NÃ£o terminais
 */
  static final public void letraMinuscula() throws ParseException {
                          /*@bgen(jjtree) letraMinuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMINUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LETRA_MINUSCULA);
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  static final public void letraMaiuscula() throws ParseException {
                          /*@bgen(jjtree) letraMaiuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMAIUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LETRA_MAIUSCULA);
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  static final public void numero() throws ParseException {
                  /*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMERO);
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

  static final public void inicioprog() throws ParseException {
                     /*@bgen(jjtree) inicioprog */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIOPROG);
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  static final public void fimprog() throws ParseException {
                  /*@bgen(jjtree) fimprog */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIMPROG);
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

  static final public void se() throws ParseException {
             /*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SE);
    } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
    }
  }

  static final public void senao() throws ParseException {
                /*@bgen(jjtree) senao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SENAO);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void para() throws ParseException {
               /*@bgen(jjtree) para */
  SimpleNode jjtn000 = new SimpleNode(JJTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PARA);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void enquanto() throws ParseException {
                   /*@bgen(jjtree) enquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENQUANTO);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  static final public void print() throws ParseException {
                /*@bgen(jjtree) print */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void atribui() throws ParseException {
                  /*@bgen(jjtree) atribui */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATRIBUI);
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

  static final public void maisMais() throws ParseException {
                   /*@bgen(jjtree) maisMais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIS_MAIS);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  static final public void menosMenos() throws ParseException {
                     /*@bgen(jjtree) menosMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOS_MENOS);
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  static final public void boolTrue() throws ParseException {
                   /*@bgen(jjtree) boolTrue */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOL_TRUE);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  static final public void boolFalse() throws ParseException {
                    /*@bgen(jjtree) boolFalse */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOL_FALSE);
    } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  static final public void abreChaves() throws ParseException {
                     /*@bgen(jjtree) abreChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRE_CHAVES);
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  static final public void fechaChaves() throws ParseException {
                      /*@bgen(jjtree) fechaChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHA_CHAVES);
    } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
    }
  }

  static final public void separador() throws ParseException {
                    /*@bgen(jjtree) separador */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEPARADOR);
    } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  static final public void abreParenteses() throws ParseException {
                         /*@bgen(jjtree) abreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRE_PARENTESES);
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  static final public void fechaParenteses() throws ParseException {
                          /*@bgen(jjtree) fechaParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHA_PARENTESES);
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  static final public void abreColchetes() throws ParseException {
                        /*@bgen(jjtree) abreColchetes */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECOLCHETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABRE_COLCHETES);
    } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
    }
  }

  static final public void fechaColchetes() throws ParseException {
                         /*@bgen(jjtree) fechaColchetes */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACOLCHETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHA_COLCHETES);
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  static final public void virgula() throws ParseException {
                  /*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
    }
  }

  static final public void ponto() throws ParseException {
                /*@bgen(jjtree) ponto */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PONTO);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void aspa() throws ParseException {
               /*@bgen(jjtree) aspa */
  SimpleNode jjtn000 = new SimpleNode(JJTASPA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASPA);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void tipoNumero() throws ParseException {
                     /*@bgen(jjtree) tipoNumero */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPONUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO_NUMERO);
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  static final public void tipoTexto() throws ParseException {
                    /*@bgen(jjtree) tipoTexto */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO_TEXTO);
    } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  static final public void tipoBool() throws ParseException {
                   /*@bgen(jjtree) tipoBool */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO_BOOL);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  static final public void tipoFuncao() throws ParseException {
                     /*@bgen(jjtree) tipoFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPO_FUNCAO);
    } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
    }
  }

  static final public void opSum() throws ParseException {
                /*@bgen(jjtree) opSum */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_SUM);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opSub() throws ParseException {
                /*@bgen(jjtree) opSub */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_SUB);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opMul() throws ParseException {
                /*@bgen(jjtree) opMul */
  SimpleNode jjtn000 = new SimpleNode(JJTOPMUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_MUL);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opDiv() throws ParseException {
                /*@bgen(jjtree) opDiv */
  SimpleNode jjtn000 = new SimpleNode(JJTOPDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_DIV);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opMod() throws ParseException {
                /*@bgen(jjtree) opMod */
  SimpleNode jjtn000 = new SimpleNode(JJTOPMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_MOD);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opAnd() throws ParseException {
                /*@bgen(jjtree) opAnd */
  SimpleNode jjtn000 = new SimpleNode(JJTOPAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_AND);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  static final public void opOr() throws ParseException {
               /*@bgen(jjtree) opOr */
  SimpleNode jjtn000 = new SimpleNode(JJTOPOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_OR);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void opGt() throws ParseException {
               /*@bgen(jjtree) opGt */
  SimpleNode jjtn000 = new SimpleNode(JJTOPGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_GT);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void opLt() throws ParseException {
               /*@bgen(jjtree) opLt */
  SimpleNode jjtn000 = new SimpleNode(JJTOPLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_LT);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void opEq() throws ParseException {
               /*@bgen(jjtree) opEq */
  SimpleNode jjtn000 = new SimpleNode(JJTOPEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_EQ);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static final public void opDif() throws ParseException {
                /*@bgen(jjtree) opDif */
  SimpleNode jjtn000 = new SimpleNode(JJTOPDIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OP_DIF);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

// Fim das Declaracoes Redundantes
  static final public void idNome() throws ParseException {
 /*@bgen(jjtree) idNome */
  SimpleNode jjtn000 = new SimpleNode(JJTIDNOME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      letra();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
        case NUMERO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
          texto();
          break;
        case NUMERO:
          numero();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void executarFuncao() throws ParseException {
 /*@bgen(jjtree) executarFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXECUTARFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      abreParenteses();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_TRUE:
      case BOOL_FALSE:
      case ABRE_PARENTESES:
      case ABRE_COLCHETES:
      case ASPA:
      case LETRA_MAIUSCULA:
      case LETRA_MINUSCULA:
      case NUMERO:
        expressao();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGULA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          virgula();
          expressao();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      fechaParenteses();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//void crementos() :
//{}
//{
//  (idNome() atribuicao())
//  | (idNome() maisMais())
//  | (idNome() menosMenos())
//  | (maisMais() idNome())
//  | (menosMenos() idNome())
//}
  static final public void dado() throws ParseException {
 /*@bgen(jjtree) dado */
  SimpleNode jjtn000 = new SimpleNode(JJTDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_TRUE:
      case BOOL_FALSE:
      case ABRE_COLCHETES:
      case ASPA:
      case NUMERO:
        constante();
        break;
      case LETRA_MAIUSCULA:
      case LETRA_MINUSCULA:
        chamadorDeIdNome();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void chamadorDeIdNome() throws ParseException {
 /*@bgen(jjtree) chamadorDeIdNome */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMADORDEIDNOME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idNome();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUI:
      case ABRE_PARENTESES:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUI:
          atribuicao();
          break;
        case ABRE_PARENTESES:
          executarFuncao();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void retorno() throws ParseException {
 /*@bgen(jjtree) retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETORNO);
      expressao();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// OLD
//void texto () :
//{}{
//  (< LETRA_MAIUSCULA > | < LETRA_MINUSCULA > )+
//}
  static final public void letra() throws ParseException {
 /*@bgen(jjtree) letra */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MINUSCULA:
        jj_consume_token(LETRA_MINUSCULA);
        break;
      case LETRA_MAIUSCULA:
        jj_consume_token(LETRA_MAIUSCULA);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// ver isso ae
  static final public void texto() throws ParseException {
 /*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      letra();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        letra();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void operador() throws ParseException {
 /*@bgen(jjtree) operador */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_SUB:
        opSub();
        break;
      case OP_SUM:
        opSum();
        break;
      case OP_DIV:
        opDiv();
        break;
      case OP_MUL:
        opMul();
        break;
      case OP_MOD:
        opMod();
        break;
      case OP_AND:
        opAnd();
        break;
      case OP_OR:
        opOr();
        break;
      case OP_DIF:
        opDif();
        break;
      case OP_EQ:
        opEq();
        break;
      case OP_LT:
        opLt();
        break;
      case OP_GT:
        opGt();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expressao() throws ParseException {
 /*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_TRUE:
      case BOOL_FALSE:
      case ABRE_COLCHETES:
      case ASPA:
      case LETRA_MAIUSCULA:
      case LETRA_MINUSCULA:
      case NUMERO:
        dado();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP_SUM:
          case OP_SUB:
          case OP_MUL:
          case OP_DIV:
          case OP_MOD:
          case OP_AND:
          case OP_OR:
          case OP_GT:
          case OP_LT:
          case OP_EQ:
          case OP_DIF:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          operador();
          expressao();
        }
        break;
      case ABRE_PARENTESES:
        abreParenteses();
        expressao();
        fechaParenteses();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_SUM:
        case OP_SUB:
        case OP_MUL:
        case OP_DIV:
        case OP_MOD:
        case OP_AND:
        case OP_OR:
        case OP_GT:
        case OP_LT:
        case OP_EQ:
        case OP_DIF:
          operador();
          expressao();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void string() throws ParseException {
 /*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      aspa();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
        case NUMERO:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
          texto();
          break;
        case NUMERO:
          numero();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      aspa();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void funcao() throws ParseException {
 /*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      abreColchetes();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_NUMERO:
      case TIPO_TEXTO:
      case TIPO_BOOL:
      case TIPO_FUNCAO:
        declaraVariaveis();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      fechaColchetes();
      abreChaves();
      bloco();
      fechaChaves();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void constante() throws ParseException {
 /*@bgen(jjtree) constante */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        numero();
        break;
      case ASPA:
        string();
        break;
      case BOOL_FALSE:
        boolFalse();
        break;
      case BOOL_TRUE:
        boolTrue();
        break;
      case ABRE_COLCHETES:
        funcao();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void idTipo() throws ParseException {
 /*@bgen(jjtree) idTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTIDTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_BOOL:
        tipoBool();
        break;
      case TIPO_NUMERO:
        tipoNumero();
        break;
      case TIPO_FUNCAO:
        tipoFuncao();
        break;
      case TIPO_TEXTO:
        tipoTexto();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void atribuicao() throws ParseException {
 /*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      atribui();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESES:
        executarFuncao();
        break;
      case BOOL_TRUE:
      case BOOL_FALSE:
      case ABRE_COLCHETES:
      case ASPA:
      case LETRA_MAIUSCULA:
      case LETRA_MINUSCULA:
      case NUMERO:
        expressao();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void declaraVariaveis() throws ParseException {
 /*@bgen(jjtree) declaraVariaveis */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idTipo();
      idNome();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUI:
        atribuicao();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        virgula();
        idNome();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUI:
          atribuicao();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
void operadorLogico() :
{}
{
  opAnd() | opOr() | opDif() | opEq() | opLt() | opGt()
}

void expressaoLogica () :
{}
{
  expressao() (operadorLogico() expressao())?
}
*/
  static final public void condicional() throws ParseException {
 /*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      se();
      expressao();
      abreChaves();
      bloco();
      fechaChaves();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SENAO:
        senao();
        abreChaves();
        bloco();
        fechaChaves();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void repeticaoPara() throws ParseException {
 /*@bgen(jjtree) repeticaoPara */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      para();
      declaraVariaveis();
      separador();
      expressao();
      separador();
      bloco();
      abreChaves();
      bloco();
      fechaChaves();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void repeticaoEnquanto() throws ParseException {
 /*@bgen(jjtree) repeticaoEnquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      enquanto();
      expressao();
      abreChaves();
      bloco();
      fechaChaves();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void top() throws ParseException {
 /*@bgen(jjtree) top */
  SimpleNode jjtn000 = new SimpleNode(JJTTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      inicioprog();
      bloco();
      fimprog();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bloco() throws ParseException {
 /*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SE:
        case PARA:
        case ENQUANTO:
        case RETORNO:
        case TIPO_NUMERO:
        case TIPO_TEXTO:
        case TIPO_BOOL:
        case TIPO_FUNCAO:
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPO_NUMERO:
        case TIPO_TEXTO:
        case TIPO_BOOL:
        case TIPO_FUNCAO:
          declaraVariaveis();
          break;
        case SE:
          condicional();
          break;
        case PARA:
          repeticaoPara();
          break;
        case ENQUANTO:
          repeticaoEnquanto();
          break;
        case LETRA_MAIUSCULA:
        case LETRA_MINUSCULA:
          chamadorDeIdNome();
          break;
        case RETORNO:
          retorno();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TopScriptTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8000000,0x228c0000,0x220c0000,0x808000,0x808000,0x0,0x0,0x0,0x0,0x0,0x228c0000,0x0,0x0,0xc0000000,0x220c0000,0xc0000000,0x228c0000,0x8000,0x8000000,0x8000,0x400,0xc0005a00,0xc0005a00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x16000,0x16000,0x0,0x16000,0x16000,0x0,0x0,0x6000,0x6000,0x1ffc,0x1ffc,0x1ffc,0x16000,0x16000,0x16000,0x3,0x10000,0x3,0x16000,0x0,0x0,0x0,0x0,0x6003,0x6003,};
   }

  /** Constructor with InputStream. */
  public TopScript(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TopScript(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TopScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TopScript(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TopScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TopScript(TopScriptTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TopScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
