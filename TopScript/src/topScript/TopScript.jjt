/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(TopScript)
package topScript;

public class TopScript
{
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new TopScript(System.in);
    try
    {
      SimpleNode n = TopScript.Start();
      n.dump("-- >");
      System.out.println("Vlw.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(TopScript)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

// Palavras reservadas
TOKEN :
{
  < INICIOPROG      : "🔝"  >
| < FIMPROG         : "🔚"  >
| < SE              : "🤔"  >
| < SENAO           : "🙄"  >
| < FOR             : "🔁"  >
| < WHILE           : "🔄"  >
| < PRINT           : "🤬"  >
| < RETURN          : "↪️"  >
| < ATRIBUI         : "✍️"  >
| < BOOL_TRUE       : "👍"  >
| < BOOL_FALSE      : "👎"  >
}

// Delimitadores
TOKEN :
{
  < ABRE_CHAVES     : "👉"  >
| < FECHA_CHAVES    : "👈"  >
| < ABRE_PARENTESES : "("   >
| < FECHA_PARENTESES: ")"   >
| < ABRE_COLCHETES  : "["   >
| < FECHA_COLCHETES : "]"   >
| < VIRGULA         : ","   >
| < PONTO           : "."   >
| < ASPA            : "'"   >

}

// Tipos de Dados
TOKEN :
{
  < TIPO_NUMERO     : "#️⃣"  >
| < TIPO_TEXTO      : "🔡"  >
| < TIPO_BOOL       : "🚻"  >
| < TIPO_FUNCAO     : "▶️"  >
}

// Operadores Matematicos
TOKEN: 
{
  < OP_SUM          : "+" >
| < OP_SUB          : "-" >
| < OP_MUL          : "*" >
| < OP_DIV          : "/" >
| < OP_MOD          : "%" >
}

// Operadores Lógicos
TOKEN:
{
  < OP_AND          : "🅰️" >
| < OP_OR           : "🅾️" >
| < OP_GT           : ">" >
| < OP_LT           : "<" >
| < OP_EQ           : "🤝" >
| < OP_DIF          : "❗" >
}

// Caracteres
TOKEN:
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < #DIGITO | ([ "0"-"9" ])+ >
}

// Sentencas 
TOKEN:
{
  < NUMERO          : 
    < DIGITO >
  | < DIGITO > "." < DIGITO >>
| < TEXTO           : 
      ( < LETRA_MAIUSCULA > | < LETRA_MINUSCULA > )+
}

SimpleNode Start() :
{}
{
  top();
  {
    return jjtThis;
  }
}

/**
 * HC SVNT DRACONES
 * Não terminais
 */

void letraMinuscula () :
{}
{
  < LETRA_MINUSCULA >
}

void letraMaiuscula () :
{}
{
  < LETRA_MAIUSCULA >
}

void numero () :
{}
{
  < NUMERO >
}

void texto ():
{}
{
  < TEXTO >
}


void inicioprog ():
{}
{
  < INICIOPROG >
}

void fimprog ():
{}
{
  < FIMPROG >
}

void se ():
{}
{
  < SE >
}

void senao ():
{}
{
  < SENAO >
}

void for ():
{}
{
  < FOR >
}

void while ():
{}
{
  < WHILE >
}

void print ():
{}
{
  < PRINT >
}

void return ():
{}
{
  < RETURN >
}

void atribui ():
{}
{
  < ATRIBUI >
}

void boolTrue ():
{}
{
  < BOOL_TRUE >
}

void boolFalse ():
{}
{
  < BOOL_FALSE >
}

void abreChaves ():
{}
{
  < ABRE_CHAVES >
}

void fechaChaves ():
{}
{
  < FECHA_CHAVES >
}

void abreParenteses ():
{}
{
  < ABRE_PARENTESES >
}

void fechaParenteses ():
{}
{
  < FECHA_PARENTESES >
}

void abreColchetes ():
{}
{
  < ABRE_COLCHETES >
}

void fechaColchetes ():
{}
{
  < FECHA_COLCHETES >
}

void virgula ():
{}
{
  < VIRGULA >
}

void ponto ():
{}
{
  < PONTO >
}

void aspa ():
{}
{
  < ASPA >
}

void tipoNumero ():
{}
{
  < TIPO_NUMERO >
}

void tipoTexto ():
{}
{
  < TIPO_TEXTO >
}

void tipoBool ():
{}
{
  < TIPO_BOOL >
}

void tipoFuncao ():
{}
{
  < TIPO_FUNCAO >
}

void opSum ():
{}
{
  < OP_SUM >
}

void opSub ():
{}
{
  < OPSUB >
}

void opMul ():
{}
{
  < OP_MUL >
}

void opDiv ():
{}
{
  < OP_DIV >
}

void opMod ():
{}
{
  < OP_MOD >
}

void opAnd ():
{}
{
  < OP_AND >
}

void opOr ():
{}
{
  < OP_OR >
}

void opGt ():
{}
{
  < OP_GT >
}

void opLt ():
{}
{
  < OP_LT >
}

void opEq ():
{}
{
  < OP_EQ >
}

void opDif ():
{}
{
  < OP_DIF >
}


// Fim das Declaracoes Redundantes


