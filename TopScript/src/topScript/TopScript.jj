/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TopScript.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD = 10;
}

PARSER_BEGIN(TopScript)
package topScript;

public class TopScript/*@bgen(jjtree)*/implements TopScriptTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTTopScriptState jjtree = new JJTTopScriptState();

/*@egen*/
  public static void main(String args [])
  {
    System.out.println("\ud83d\udd1d");
    System.out.println("Reading from standard input...");
    System.out.println("Entra o programa top:");
    new TopScript(System.in);
    try
    {
      SimpleNode n = TopScript.Start();
      n.dump("-- > ");

      System.out.println("Vlw.");
    }
    catch (Exception e)
    {
      System.out.println("\n\ud83d\ude22.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(TopScript)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

// Palavras reservadas
TOKEN :
{
  < INICIOPROG      : "\ud83d\udd1d"  >
| < FIMPROG         : "\ud83d\udd1a"  >
| < SE              : "\ud83e\udd14"  >
| < SENAO           : "\ud83d\ude44"  >
| < PARA            : "\ud83d\udd01"  >
| < ENQUANTO        : "\ud83d\udd04"  >
| < PRINT           : "\ud83e\udd2c"  >
| < RETORNO         : "\u21aa\ufe0f"  >
| < ATRIBUI         : "\u270d\ufe0f"  >
| < MAIS_MAIS       : "\u23eb"  >
| < MENOS_MENOS     : "\u23ec"  >
| < BOOL_TRUE       : "\ud83d\udc4d"  >
| < BOOL_FALSE      : "\ud83d\udc4e"  >
}

// Delimitadores
TOKEN :
{
  < ABRE_CHAVES     : "\ud83d\udc49"  >
| < FECHA_CHAVES    : "\ud83d\udc48"  >
| < SEPARADOR       : "\ud83d\udc4c"  >
| < ABRE_PARENTESES : "("   >
| < FECHA_PARENTESES: ")"   >
| < ABRE_COLCHETES  : "["   >
| < FECHA_COLCHETES : "]"   >
| < VIRGULA         : ","   >
| < PONTO           : "."   >
| < ASPA            : "'"   >

}

// Tipos de Dados
TOKEN :
{
  < TIPO_NUMERO     : "#\ufe0f\u20e3"  >
| < TIPO_TEXTO      : "\ud83d\udd21"  >
| < TIPO_BOOL       : "\ud83d\udebb"  >
| < TIPO_FUNCAO     : "\u25b6\ufe0f"   >
}

// Operadores Matematicos
TOKEN: 
{
  < OP_SUM          : "+" >
| < OP_SUB          : "-" >
| < OP_MUL          : "*" >
| < OP_DIV          : "/" >
| < OP_MOD          : "%" >
}

// Operadores L\u00f3gicos
TOKEN:
{
  < OP_AND          : "\ud83c\udd70\ufe0f" >
| < OP_OR           : "\ud83c\udd7e\ufe0f" >
| < OP_GT           : ">" >
| < OP_LT           : "<" >
| < OP_EQ           : "\ud83e\udd1d" >
| < OP_DIF          : "\u2757" >
}

// Caracteres
TOKEN:
{
  < LETRA_MAIUSCULA : [ "A"-"Z" ] >
| < LETRA_MINUSCULA : [ "a"-"z" ] >
| < #DIGITO : ([ "0"-"9" ])+ >
}

// Sentencas 
TOKEN:
{
  < NUMERO          : 
    < DIGITO >
  | < DIGITO > "." < DIGITO >
  | < OP_SUB > < DIGITO >
  | < OP_SUB > < DIGITO > "." < DIGITO >>
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (top())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 * HC SVNT DRACONES
 * N\u00e3o terminais
 */

void letraMinuscula () : {/*@bgen(jjtree) letraMinuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMINUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) letraMinuscula */
                            try {
/*@egen*/< LETRA_MINUSCULA >/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void letraMaiuscula () : {/*@bgen(jjtree) letraMaiuscula */
  SimpleNode jjtn000 = new SimpleNode(JJTLETRAMAIUSCULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) letraMaiuscula */
                            try {
/*@egen*/< LETRA_MAIUSCULA >/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void numero () : {/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) numero */
                    try {
/*@egen*/< NUMERO >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}

void inicioprog (): {/*@bgen(jjtree) inicioprog */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) inicioprog */
                       try {
/*@egen*/< INICIOPROG >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void fimprog (): {/*@bgen(jjtree) fimprog */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fimprog */
                    try {
/*@egen*/< FIMPROG >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}
void se (): {/*@bgen(jjtree) se */
  SimpleNode jjtn000 = new SimpleNode(JJTSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) se */
               try {
/*@egen*/< SE >/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/}
void senao (): {/*@bgen(jjtree) senao */
  SimpleNode jjtn000 = new SimpleNode(JJTSENAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) senao */
                  try {
/*@egen*/< SENAO >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void para (): {/*@bgen(jjtree) para */
  SimpleNode jjtn000 = new SimpleNode(JJTPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) para */
                 try {
/*@egen*/< PARA >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void enquanto (): {/*@bgen(jjtree) enquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) enquanto */
                     try {
/*@egen*/< ENQUANTO >/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void print (): {/*@bgen(jjtree) print */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) print */
                  try {
/*@egen*/< PRINT >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void atribui (): {/*@bgen(jjtree) atribui */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) atribui */
                    try {
/*@egen*/< ATRIBUI >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}
void maisMais (): {/*@bgen(jjtree) maisMais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) maisMais */
                     try {
/*@egen*/< MAIS_MAIS >/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void menosMenos (): {/*@bgen(jjtree) menosMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) menosMenos */
                       try {
/*@egen*/< MENOS_MENOS >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void boolTrue (): {/*@bgen(jjtree) boolTrue */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) boolTrue */
                     try {
/*@egen*/< BOOL_TRUE >/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void boolFalse (): {/*@bgen(jjtree) boolFalse */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) boolFalse */
                      try {
/*@egen*/< BOOL_FALSE >/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/}
void abreChaves (): {/*@bgen(jjtree) abreChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) abreChaves */
                       try {
/*@egen*/< ABRE_CHAVES >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void fechaChaves (): {/*@bgen(jjtree) fechaChaves */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACHAVES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fechaChaves */
                        try {
/*@egen*/< FECHA_CHAVES >/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                          }
                        }
/*@egen*/}
void separador (): {/*@bgen(jjtree) separador */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) separador */
                      try {
/*@egen*/< SEPARADOR >/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/}
void abreParenteses (): {/*@bgen(jjtree) abreParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) abreParenteses */
                           try {
/*@egen*/< ABRE_PARENTESES >/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/}
void fechaParenteses (): {/*@bgen(jjtree) fechaParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fechaParenteses */
                            try {
/*@egen*/< FECHA_PARENTESES >/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void abreColchetes (): {/*@bgen(jjtree) abreColchetes */
  SimpleNode jjtn000 = new SimpleNode(JJTABRECOLCHETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) abreColchetes */
                          try {
/*@egen*/< ABRE_COLCHETES >/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                            }
                          }
/*@egen*/}
void fechaColchetes (): {/*@bgen(jjtree) fechaColchetes */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHACOLCHETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fechaColchetes */
                           try {
/*@egen*/< FECHA_COLCHETES >/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/}
void virgula (): {/*@bgen(jjtree) virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) virgula */
                    try {
/*@egen*/< VIRGULA >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}
void ponto (): {/*@bgen(jjtree) ponto */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ponto */
                  try {
/*@egen*/< PONTO >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void aspa (): {/*@bgen(jjtree) aspa */
  SimpleNode jjtn000 = new SimpleNode(JJTASPA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) aspa */
                 try {
/*@egen*/< ASPA >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void tipoNumero (): {/*@bgen(jjtree) tipoNumero */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPONUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipoNumero */
                       try {
/*@egen*/< TIPO_NUMERO >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void tipoTexto (): {/*@bgen(jjtree) tipoTexto */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipoTexto */
                      try {
/*@egen*/< TIPO_TEXTO >/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/}
void tipoBool (): {/*@bgen(jjtree) tipoBool */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipoBool */
                     try {
/*@egen*/< TIPO_BOOL >/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void tipoFuncao (): {/*@bgen(jjtree) tipoFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) tipoFuncao */
                       try {
/*@egen*/< TIPO_FUNCAO >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                         }
                       }
/*@egen*/}
void opSum (): {/*@bgen(jjtree) opSum */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opSum */
                  try {
/*@egen*/< OP_SUM >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opSub (): {/*@bgen(jjtree) opSub */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opSub */
                  try {
/*@egen*/< OP_SUB >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opMul (): {/*@bgen(jjtree) opMul */
  SimpleNode jjtn000 = new SimpleNode(JJTOPMUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opMul */
                  try {
/*@egen*/< OP_MUL >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opDiv (): {/*@bgen(jjtree) opDiv */
  SimpleNode jjtn000 = new SimpleNode(JJTOPDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opDiv */
                  try {
/*@egen*/< OP_DIV >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opMod (): {/*@bgen(jjtree) opMod */
  SimpleNode jjtn000 = new SimpleNode(JJTOPMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opMod */
                  try {
/*@egen*/< OP_MOD >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opAnd (): {/*@bgen(jjtree) opAnd */
  SimpleNode jjtn000 = new SimpleNode(JJTOPAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opAnd */
                  try {
/*@egen*/< OP_AND >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void opOr (): {/*@bgen(jjtree) opOr */
  SimpleNode jjtn000 = new SimpleNode(JJTOPOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opOr */
                 try {
/*@egen*/< OP_OR >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void opGt (): {/*@bgen(jjtree) opGt */
  SimpleNode jjtn000 = new SimpleNode(JJTOPGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opGt */
                 try {
/*@egen*/< OP_GT >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void opLt (): {/*@bgen(jjtree) opLt */
  SimpleNode jjtn000 = new SimpleNode(JJTOPLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opLt */
                 try {
/*@egen*/< OP_LT >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void opEq (): {/*@bgen(jjtree) opEq */
  SimpleNode jjtn000 = new SimpleNode(JJTOPEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opEq */
                 try {
/*@egen*/< OP_EQ >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
                 }
/*@egen*/}
void opDif (): {/*@bgen(jjtree) opDif */
  SimpleNode jjtn000 = new SimpleNode(JJTOPDIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opDif */
                  try {
/*@egen*/< OP_DIF >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}

// Fim das Declaracoes Redundantes

void retorno (): 
{/*@bgen(jjtree) retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retorno */
  try {
/*@egen*/
  < RETORNO > expressao()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void texto () :
{/*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) texto */
  try {
/*@egen*/
  (< LETRA_MAIUSCULA > | < LETRA_MINUSCULA > )+/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operador():
{/*@bgen(jjtree) operador */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) operador */
        try {
/*@egen*/
	opSub() | opSum() | opDiv() | opMul() | opMod() | opAnd() | opOr() | opDif() | opEq() | opLt() | opGt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void dado() :
{/*@bgen(jjtree) dado */
  SimpleNode jjtn000 = new SimpleNode(JJTDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) dado */
        try {
/*@egen*/
	constante() | executarFuncao() | idNome()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expressao():
{/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) expressao */
  try {
/*@egen*/
  dado() (operador() (dado() | expressao()))*
| abreParenteses() expressao() fechaParenteses() (operador() expressao())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void string() :
{/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string */
  try {
/*@egen*/
  aspa()
  (
    texto() |
    numero()
  )*
  aspa()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void funcao() :
{/*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcao */
  try {
/*@egen*/
  abreParenteses() (declaraVariaveis())? fechaParenteses()
  abreChaves()
    bloco()
  fechaChaves()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void constante() :
{/*@bgen(jjtree) constante */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constante */
    try {
/*@egen*/
    numero()
  | string()
  | boolFalse()
  | boolTrue()
  | funcao()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void idTipo() :
{/*@bgen(jjtree) idTipo */
  SimpleNode jjtn000 = new SimpleNode(JJTIDTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) idTipo */
    try {
/*@egen*/
    tipoBool()
  | tipoNumero()
  | tipoFuncao()
  | tipoTexto()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void palavrasReservadas() :
{/*@bgen(jjtree) palavrasReservadas */
  SimpleNode jjtn000 = new SimpleNode(JJTPALAVRASRESERVADAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) palavrasReservadas */
  try {
/*@egen*/
  print()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void idNome() :
{/*@bgen(jjtree) idNome */
  SimpleNode jjtn000 = new SimpleNode(JJTIDNOME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) idNome */
  try {
/*@egen*/
  (letraMinuscula() (texto() | numero())* ) | (palavrasReservadas() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void atribuicao() :
{/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) atribuicao */
  try {
/*@egen*/
  atribui() ( executarFuncao() | expressao() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaraVariaveis() :
{/*@bgen(jjtree) declaraVariaveis */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaraVariaveis */
  try {
/*@egen*/
  idTipo() idNome() (atribuicao())? 
  (virgula() idNome() (atribuicao())?)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*
void operadorLogico() :
{}
{
  opAnd() | opOr() | opDif() | opEq() | opLt() | opGt()
}

void expressaoLogica () :
{}
{
  expressao() (operadorLogico() expressao())?
}
*/
void condicional() :
{/*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicional */
  try {
/*@egen*/
  se() expressao() 
  abreChaves()
    bloco()
  fechaChaves()
  (senao()
    abreChaves() 
      bloco()
    fechaChaves()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repeticaoPara () :
{/*@bgen(jjtree) repeticaoPara */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOPARA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeticaoPara */
  try {
/*@egen*/
  para() declaraVariaveis() separador() expressao() separador() bloco() 
  abreChaves()
    bloco()
  fechaChaves()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repeticaoEnquanto () :
{/*@bgen(jjtree) repeticaoEnquanto */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAOENQUANTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeticaoEnquanto */
  try {
/*@egen*/
  enquanto() expressao()
  abreChaves()
    bloco()
  fechaChaves()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void executarFuncao() :
{/*@bgen(jjtree) executarFuncao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXECUTARFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) executarFuncao */
  try {
/*@egen*/
  idNome() 
  abreParenteses() 
    (expressao() (virgula() expressao())* )? 
  fechaParenteses()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void top() :
{/*@bgen(jjtree) top */
  SimpleNode jjtn000 = new SimpleNode(JJTTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) top */
  try {
/*@egen*/
  inicioprog()
	bloco()
  fimprog()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void crementos() :
{/*@bgen(jjtree) crementos */
  SimpleNode jjtn000 = new SimpleNode(JJTCREMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) crementos */
  try {
/*@egen*/
  (idNome() atribuicao())
  | (idNome() maisMais())
  | (idNome() menosMenos())
  | (maisMais() idNome())
  | (menosMenos() idNome())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bloco():
{/*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bloco */
  try {
/*@egen*/
  (
    declaraVariaveis()
    | condicional()
    | repeticaoPara()
    | repeticaoEnquanto()
    | executarFuncao()
    | crementos()
    | retorno()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}